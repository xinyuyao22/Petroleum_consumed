x1=cbind(rep(1,n),x1)
} else {
x1=as.matrix(rep(1,n),ncol=1)
}
# Part of design matrix for estimating seasonality
x2=NULL
if(seas>1){
sn=rep(1:seas,length.out=n)
x2=factor(sn,levels=unique(sn),ordered=TRUE)
x2=model.matrix(~x2-1)
m2=ncol(x2)
m21=m2-1
x2=x2[,1:m21]-matrix(rep(x2[,m2],m21),ncol=m21,nrow=nrow(x2),byrow=F)
}
x=cbind(x1,x2)  # design matrix
xx=t(x)%*%x
rsq=rep(1,m)
m1=ncol(x1)     #degtrnd+1
m11=m1+1
mx=ncol(x)      # degtrnd+1+seas-1
for(i in 1:m) {
if (lam[i]==0) {
yt=log(y)
} else {
yt=y^lam[i]
}
xy=t(x)%*%yt
coef=solve(xx,xy)
fit=x%*%coef
res=yt-fit
ssto=(n-1)*var(yt)
sse=t(res)%*%res
rsq[i]=1-((n-1)/(n-mx))*sse/ssto
}
ii=which.max(rsq)
lamopt=lam[ii]
if (lamopt==0) {
yt=log(y)
} else {
yt=y^lamopt
}
xy=t(x)%*%yt
coef=solve(xx,xy)
fit=x%*%coef
trnd=x1%*%coef[1:m1]
season=NULL
if(seas>1){
season=c(coef[m11:mx],-sum(coef[m11:mx]))
}
res=yt-fit
result=list(coef=coef,fitted=fit,trend=trnd,residual=res,season=season,rsq=rsq,lamopt=lamopt)
return(result)
}
lam= seq(-1,1, by=0.05)
mod= trndseas(y, seas = 12,lam = lam, degtrnd = 5)
mod$lamopt
month= 1:12
mod = trndseas(y, seas = 12,lam = 0.6,degtrnd = 5)
m.fit = mod$trend
m.fit <- ts(m.fit, start = c(1984, 1), frequency = 12)
ts.plot(y ^ .6, m.fit, main='Estimated Trend')
plot(month,mod$season,type='l',ylab='Seasonals',main='Estimated Seasonal Component')
s.fit = rep(mod$season,length.out=n)
smooth.fit = mod$fit
x = y ^ .6 - m.fit - s.fit
plot(x,ylab ='', main='Estimated Rough Component')
n2=n-12
x2=x[1:n2]
acf(x2)
pacf(x2)
fit_0_0_0=arima(x2,order=c(0,0,0))
summary(fit_0_0_0)
fit_0_1_0=arima(x2,order=c(0,1,0))
res = fit_0_1_0$res
acf(res)
pacf(res)
summary(fit_0_1_0)
acf(x2)
pacf(x2)
fit_1_0_0=arima(x2,order=c(1,0,0))
summary(fit_1_0_0)
res = fit_1_0_0$res
acf(res)
pacf(res)
Box.test(res,lag=20,'Ljung-Box')
fit_2_0_2=arima(x2,order=c(2,0,2))
summary(fit_2_0_2)
res = fit_2_0_2$res
acf(res)
pacf(res)
Box.test(res,lag=20,'Ljung-Box')
hist(res)
h=12
m.fc=m.fit[-(1:n2)]
s.fc=s.fit[-(1:n2)]
fcast = predict(fit_2_0_2,n.ahead=h)
x.fc = fcast$pred
y.fc = m.fc + s.fc + x.fc
de_tran_y.fc=y.fc^(1/0.6)
y = petroleum[,"Value"]
plot.ts(y,xlim=c(0,n2+h))
points(x=n2+1:h, y=de_tran_y.fc, col='purple',type='b',pch=19)
loadPkg("Metrics")
loadPkg("data.table")
data.table(true = y[-(1:n2)], predict = de_tran_y.fc, diff = y[-(1:n2)]-de_tran_y.fc)
petroleum <- petroleum[which(petroleum$YYYYMM <= 201809), ]
train = petroleum[,"Value"]
train <- ts(train, start = c(1984, 1), frequency = 12)
HW <- HoltWinters(train)
loadPkg("forecast")
HWfc <- forecast(HW, h=12)
loadPkg("highcharter") # to use hchart function
hchart(HWfc)
data.table(true = y[-(1:n2)], predict = HWfc$mean, diff = y[-(1:n2)] - HWfc$mean)
data.table(this_year = y[-(1:n2)], last_year = y[-c(1:(n2-12), n2+1:n)], diff = y[-(1:n2)] - y[-c(1:(n2-12), n2+1:n)])
HW
loadPkg("data.table")
data.table(true = y[-(1:n2)], predict = de_tran_y.fc, diff = y[-(1:n2)]-de_tran_y.fc)
library('rmse')
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
petroleum=read.csv("MER_T03_07A.csv")
petroleum <- petroleum[which(petroleum$MSN == 'PARCPUS'), ]
petroleum <- petroleum[which(petroleum$YYYYMM >= 198401), ]
# YYYY13 is the average of the year, so it's cleaned for time series analysis
Y <- 198413
while (Y < 201913) {
petroleum <- petroleum[which(petroleum$YYYYMM != Y), ]
Y = Y + 100
}
# "Value" is a factor. Need to use as.character before as.numeric.
petroleum$Value <- as.character(petroleum$Value)
petroleum$Value <- as.numeric(petroleum$Value)
y = petroleum[,"Value"]
y <- ts(y, start = c(1984, 1), frequency = 12)
n = length(y)
ts.plot(y,main = 'Petroleum Consumed by the Residential Sector',type = 'l',xlab = 'Time', ylab = 'Petroleu Comsumption')
trndseas=function(y,seas,lam,degtrnd){
# requires the R-package 'pracma'
# fits  a trend plus seasonal for the "best" Box-Cox
# transformation.
# input: y, observed series; seas, seasons
# input: lam, the grid of Box-Cox transformations (lambda values)
# input: degtrnd, degree of the polynomial trend, if
# degtrnd=0, then the fitted trend is constant.
# output:  coef, regression coefficients - the
# first degtrnd+1 values for the trend part and the
# rest associated with the seasonals
# output: fit, fitted y-values; res, residuals,
# output: trend, fitted trend; season, fitted seasonals
# output: rsq, adjusted r-square values for different lambda in the
# output: lamopt, the value of lambda (among those supplied
# in the vector lam) at which r-square is maximum.
m=length(lam)
n=length(y)
# Part of design matrix for estimating trend
if(degtrnd>0) {
tm=seq(1/n,1,by=1/n)
x1=poly(tm,degree=degtrnd,raw=TRUE)
x1=cbind(rep(1,n),x1)
} else {
x1=as.matrix(rep(1,n),ncol=1)
}
# Part of design matrix for estimating seasonality
x2=NULL
if(seas>1){
sn=rep(1:seas,length.out=n)
x2=factor(sn,levels=unique(sn),ordered=TRUE)
x2=model.matrix(~x2-1)
m2=ncol(x2)
m21=m2-1
x2=x2[,1:m21]-matrix(rep(x2[,m2],m21),ncol=m21,nrow=nrow(x2),byrow=F)
}
x=cbind(x1,x2)  # design matrix
xx=t(x)%*%x
rsq=rep(1,m)
m1=ncol(x1)     #degtrnd+1
m11=m1+1
mx=ncol(x)      # degtrnd+1+seas-1
for(i in 1:m) {
if (lam[i]==0) {
yt=log(y)
} else {
yt=y^lam[i]
}
xy=t(x)%*%yt
coef=solve(xx,xy)
fit=x%*%coef
res=yt-fit
ssto=(n-1)*var(yt)
sse=t(res)%*%res
rsq[i]=1-((n-1)/(n-mx))*sse/ssto
}
ii=which.max(rsq)
lamopt=lam[ii]
if (lamopt==0) {
yt=log(y)
} else {
yt=y^lamopt
}
xy=t(x)%*%yt
coef=solve(xx,xy)
fit=x%*%coef
trnd=x1%*%coef[1:m1]
season=NULL
if(seas>1){
season=c(coef[m11:mx],-sum(coef[m11:mx]))
}
res=yt-fit
result=list(coef=coef,fitted=fit,trend=trnd,residual=res,season=season,rsq=rsq,lamopt=lamopt)
return(result)
}
lam= seq(-1,1, by=0.05)
mod= trndseas(y, seas = 12,lam = lam, degtrnd = 5)
mod$lamopt
month= 1:12
mod = trndseas(y, seas = 12,lam = 0.6,degtrnd = 5)
m.fit = mod$trend
m.fit <- ts(m.fit, start = c(1984, 1), frequency = 12)
ts.plot(y ^ .6, m.fit, main='Estimated Trend')
plot(month,mod$season,type='l',ylab='Seasonals',main='Estimated Seasonal Component')
s.fit = rep(mod$season,length.out=n)
smooth.fit = mod$fit
x = y ^ .6 - m.fit - s.fit
plot(x,ylab ='', main='Estimated Rough Component')
n2=n-12
x2=x[1:n2]
acf(x2)
pacf(x2)
fit_0_0_0=arima(x2,order=c(0,0,0))
summary(fit_0_0_0)
fit_0_1_0=arima(x2,order=c(0,1,0))
res = fit_0_1_0$res
acf(res)
pacf(res)
summary(fit_0_1_0)
acf(x2)
pacf(x2)
fit_1_0_0=arima(x2,order=c(1,0,0))
summary(fit_1_0_0)
res = fit_1_0_0$res
acf(res)
pacf(res)
Box.test(res,lag=20,'Ljung-Box')
fit_2_0_2=arima(x2,order=c(2,0,2))
summary(fit_2_0_2)
res = fit_2_0_2$res
acf(res)
pacf(res)
Box.test(res,lag=20,'Ljung-Box')
hist(res)
h=12
m.fc=m.fit[-(1:n2)]
s.fc=s.fit[-(1:n2)]
fcast = predict(fit_2_0_2,n.ahead=h)
x.fc = fcast$pred
y.fc = m.fc + s.fc + x.fc
de_tran_y.fc=y.fc^(1/0.6)
y = petroleum[,"Value"]
plot.ts(y,xlim=c(0,n2+h))
points(x=n2+1:h, y=de_tran_y.fc, col='purple',type='b',pch=19)
loadPkg("Metrics")
loadPkg("data.table")
data.table(true = y[-(1:n2)], predict = de_tran_y.fc, diff = y[-(1:n2)]-de_tran_y.fc)
petroleum <- petroleum[which(petroleum$YYYYMM <= 201809), ]
train = petroleum[,"Value"]
train <- ts(train, start = c(1984, 1), frequency = 12)
HW <- HoltWinters(train)
loadPkg("forecast")
HWfc <- forecast(HW, h=12)
loadPkg("highcharter") # to use hchart function
hchart(HWfc)
data.table(true = y[-(1:n2)], predict = HWfc$mean, diff = y[-(1:n2)] - HWfc$mean)
data.table(this_year = y[-(1:n2)], last_year = y[-c(1:(n2-12), n2+1:n)], diff = y[-(1:n2)] - y[-c(1:(n2-12), n2+1:n)])
HW
petroleum <- petroleum[which(petroleum$YYYYMM <= 201809), ]
train = petroleum[,"Value"]
train <- ts(train, start = c(1984, 1), frequency = 12)
HW <- HoltWinters(train, h=12,seasonal='multiplicative')
petroleum <- petroleum[which(petroleum$YYYYMM <= 201809), ]
train = petroleum[,"Value"]
train <- ts(train, start = c(1984, 1), frequency = 12)
HW <- HoltWinters(train, seasonal='multiplicative')
loadPkg("forecast")
HWfc <- forecast(HW, h=12)
loadPkg("highcharter") # to use hchart function
hchart(HWfc)
data.table(true = y[-(1:n2)], predict = HWfc$mean, diff = y[-(1:n2)] - HWfc$mean)
rmse(y[-(1:n2)], HWfc$mean)
petroleum <- petroleum[which(petroleum$YYYYMM <= 201809), ]
train = petroleum[,"Value"]
train <- ts(train, start = c(1984, 1), frequency = 12)
HW <- HoltWinters(train)
loadPkg("forecast")
HWfc <- forecast(HW, h=12)
loadPkg("highcharter") # to use hchart function
hchart(HWfc)
data.table(true = y[-(1:n2)], predict = HWfc$mean, diff = y[-(1:n2)] - HWfc$mean)
rmse(y[-(1:n2)], HWfc$mean)
fit<-auto.arima(train)
accuracy(forecast(fit,h=12),y[-(1:n2)])
fit
fit_ets<-ets(train)
accuracy(predict(fit,12),y[-(1:n2)])
fit_ets<-ets(train)
accuracy(predict(fit_ets,12),y[-(1:n2)])
pred_stlf<-stlf(train)
rmse(pred_stlf$mean,y[-(1:n2)])
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
electricity=read.csv("Electricity_End_Use.csv")
electricity <- electricity[which(electricity$MSN == 'ESRCPUS'), ]
electricity <- electricity[which(electricity$YYYYMM >= 197301), ]
# YYYY13 is the average of the year, so it's cleaned for time series analysis
Y <- 197313
while (Y < 201913) {
electricity <- electricity[which(electricity$YYYYMM != Y), ]
Y = Y + 100
}
# "Value" is a factor. Need to use as.character before as.numeric.
electricity$Value <- as.character(electricity$Value)
electricity$Value <- as.numeric(electricity$Value)
y = electricity[,"Value"]
y <- ts(y, start = c(1973, 1), frequency = 12)
n = length(y)
ts.plot(y,main = 'Electricity Consumed by the Residential Sector',type = 'l',xlab = 'Time', ylab = 'Electricity Comsumption')
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
electricity=read.csv("Electricity_End_Use.csv")
electricity <- electricity[which(electricity$MSN == 'ESRCPUS'), ]
electricity <- electricity[which(electricity$YYYYMM >= 197301), ]
# YYYY13 is the average of the year, so it's cleaned for time series analysis
Y <- 197313
while (Y < 202013) {
electricity <- electricity[which(electricity$YYYYMM != Y), ]
Y = Y + 100
}
# "Value" is a factor. Need to use as.character before as.numeric.
electricity$Value <- as.character(electricity$Value)
electricity$Value <- as.numeric(electricity$Value)
y = electricity[,"Value"]
y <- ts(y, start = c(1973, 1), frequency = 12)
n = length(y)
ts.plot(y,main = 'Electricity Consumed by the Residential Sector',type = 'l',xlab = 'Time', ylab = 'Electricity Comsumption')
plot(stl(y, s.window = 'periodic'))
trndseas=function(y,seas,lam,degtrnd){
# requires the R-package 'pracma'
# fits  a trend plus seasonal for the "best" Box-Cox
# transformation.
# input: y, observed series; seas, seasons
# input: lam, the grid of Box-Cox transformations (lambda values)
# input: degtrnd, degree of the polynomial trend, if
# degtrnd=0, then the fitted trend is constant.
# output:  coef, regression coefficients - the
# first degtrnd+1 values for the trend part and the
# rest associated with the seasonals
# output: fit, fitted y-values; res, residuals,
# output: trend, fitted trend; season, fitted seasonals
# output: rsq, adjusted r-square values for different lambda in the
# output: lamopt, the value of lambda (among those supplied
# in the vector lam) at which r-square is maximum.
m=length(lam)
n=length(y)
# Part of design matrix for estimating trend
if(degtrnd>0) {
tm=seq(1/n,1,by=1/n)
x1=poly(tm,degree=degtrnd,raw=TRUE)
x1=cbind(rep(1,n),x1)
} else {
x1=as.matrix(rep(1,n),ncol=1)
}
# Part of design matrix for estimating seasonality
x2=NULL
if(seas>1){
sn=rep(1:seas,length.out=n)
x2=factor(sn,levels=unique(sn),ordered=TRUE)
x2=model.matrix(~x2-1)
m2=ncol(x2)
m21=m2-1
x2=x2[,1:m21]-matrix(rep(x2[,m2],m21),ncol=m21,nrow=nrow(x2),byrow=F)
}
x=cbind(x1,x2)  # design matrix
xx=t(x)%*%x
rsq=rep(1,m)
m1=ncol(x1)     #degtrnd+1
m11=m1+1
mx=ncol(x)      # degtrnd+1+seas-1
for(i in 1:m) {
if (lam[i]==0) {
yt=log(y)
} else {
yt=y^lam[i]
}
xy=t(x)%*%yt
coef=solve(xx,xy)
fit=x%*%coef
res=yt-fit
ssto=(n-1)*var(yt)
sse=t(res)%*%res
rsq[i]=1-((n-1)/(n-mx))*sse/ssto
}
ii=which.max(rsq)
lamopt=lam[ii]
if (lamopt==0) {
yt=log(y)
} else {
yt=y^lamopt
}
xy=t(x)%*%yt
coef=solve(xx,xy)
fit=x%*%coef
trnd=x1%*%coef[1:m1]
season=NULL
if(seas>1){
season=c(coef[m11:mx],-sum(coef[m11:mx]))
}
res=yt-fit
result=list(coef=coef,fitted=fit,trend=trnd,residual=res,season=season,rsq=rsq,lamopt=lamopt)
return(result)
}
lam= seq(-1,1, by=0.05)
mod= trndseas(y, seas = 12,lam = lam, degtrnd = 5)
mod$lamopt
lam= seq(-1,1, by=0.05)
mod= trndseas(y, seas = 12,lam = lam, degtrnd = 1)
mod$lamopt
lam= seq(-1,1, by=0.05)
mod= trndseas(y, seas = 12,lam = lam, degtrnd = 2)
mod$lamopt
lam= seq(-1,1, by=0.05)
mod= trndseas(y, seas = 12,lam = lam, degtrnd = 3)
mod$lamopt
month= 1:12
mod = trndseas(y, seas = 12,lam = -0.45,degtrnd = 3)
m.fit = mod$trend
m.fit <- ts(m.fit, start = c(1984, 1), frequency = 12)
ts.plot(y ^ .6, m.fit, main='Estimated Trend')
month= 1:12
mod = trndseas(y, seas = 12,lam = -0.45,degtrnd = 3)
m.fit = mod$trend
m.fit <- ts(m.fit, start = c(1973, 1), frequency = 12)
ts.plot(y ^ (-0.45), m.fit, main='Estimated Trend')
plot(month,mod$season,type='l',ylab='Seasonals',main='Estimated Seasonal Component')
lam= seq(-1,1, by=0.05)
mod= trndseas(y, seas = 12,lam = lam, degtrnd = 2)
mod$lamopt
lam= seq(-1,1, by=0.05)
mod= trndseas(y, seas = 12,lam = lam, degtrnd = 1)
mod$lamopt
month= 1:12
mod = trndseas(y, seas = 12,lam = 0.25,degtrnd = 1)
m.fit = mod$trend
m.fit <- ts(m.fit, start = c(1973, 1), frequency = 12)
ts.plot(y ^ 0.25, m.fit, main='Estimated Trend')
plot(month,mod$season,type='l',ylab='Seasonals',main='Estimated Seasonal Component')
electricity <- eletricity[which(petroleum$YYYYMM <= 201911), ]
electricity <- electricity[which(electricity$YYYYMM <= 201911), ]
train = electricity[,"Value"]
train <- ts(train, start = c(2005, 1), frequency = 12)
HW <- HoltWinters(train)
loadPkg("forecast")
HWfc <- forecast(HW, h=12)
loadPkg("highcharter") # to use hchart function
hchart(HWfc)
data.table(true = y[-(1:n2)], predict = HWfc$mean, diff = y[-(1:n2)] - HWfc$mean)
electricity <- electricity[which(electricity$YYYYMM <= 201911), ]
train = electricity[,"Value"]
train <- ts(train, start = c(2005, 1), frequency = 12)
HW <- HoltWinters(train)
loadPkg("forecast")
HWfc <- forecast(HW, h=12)
loadPkg("highcharter") # to use hchart function
hchart(HWfc)
n2 = n - 12
data.table(true = y[-(1:n2)], predict = HWfc$mean, diff = y[-(1:n2)] - HWfc$mean)
electricity <- electricity[which(electricity$YYYYMM <= 201911), ]
train = electricity[,"Value"]
train <- ts(train, start = c(2005, 1), frequency = 12)
pred_stlf<-stlf(train)
loadPkg("highcharter") # to use hchart function
hchart(pred_stlf)
n2 = n - 12
rmse(pred_stlf$mean,y[-(1:n2)])
electricity <- electricity[which(electricity$YYYYMM <= 201911), ]
train = electricity[,"Value"]
train <- ts(train, start = c(2005, 1), frequency = 12)
pred_stlf<-stlf(train)
loadPkg("highcharter") # to use hchart function
hchart(pred_stlf)
n2 = n - 12
electricity <- electricity[which(electricity$YYYYMM <= 201911), ]
train = electricity[,"Value"]
train <- ts(train, start = c(2005, 1), frequency = 12)
pred_stlf<-focast(stl(train, s.window="periodic"), method="ets")
electricity <- electricity[which(electricity$YYYYMM <= 201911), ]
train = electricity[,"Value"]
train <- ts(train, start = c(2005, 1), frequency = 12)
pred_stlf<-forecast(stl(train, s.window="periodic"), method="ets")
loadPkg("highcharter") # to use hchart function
hchart(pred_stlf)
n2 = n - 12
rmse(pred_stlf$mean,y[-(1:n2)])
rmse(y[-(1:n2)], HWfc$mean)
rmse(y[-(1:n2)], ETSfc$mean)
fit_ets<-ets(train)
ETSfc <- forecast(fit_ets, h=12)
hchart(ETSfc)
rmse(y[-(1:n2)], ETSfc$mean)
rmse(y[-(1:n2)], ARIMAfc$mean)
fit_ARIMA<-auto.arima(train)
ARIMAfc <- forecast(fit_ARIMA, h=12)
hchart(ARIMAfc)
#accuracy(forecast(fit,h=12),y[-(1:n2)])
rmse(y[-(1:n2)], ARIMAfc$mean)
fit_ARIMA
